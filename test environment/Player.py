import Pokemon as p
import json, random

class Player():
	def __init__(self, team=None, knownOpponentTeam=None, opponentTeam=None):
		if team is None:
			self.team = {}
		if knownOpponentTeam is None:
			self.knownOpponentTeam = {}
		if opponentTeam is None:
			self.opponentTeam = {}
		self.has_won = False;

		self.build_team()

	""" Sets which pokemon is on the field for a player. This is kept as
	a Pokemon object. """
	def set_current_out(self, move):
		if move.isSwitch:
			self.current_out = move.pokemon

	def set_opponent_current_out(self, move):
		if move.isSwitch:
			self.opponent_current_out = move.pokemon

	""" This method handles the logic of updating the opponent's team
	i.e. changing which Pokemon is currently out, which Pokemon are known,
	and what moves are known.

	After this method is called, everything except damage will be correctly updated
	in the player's model of the opponent's team. """
	def update_opponent_team(self, move):
		if move.isSwitch:
			if move.pokemon.name not in self.knownOpponentTeam:
				newPokemon = p.Pokemon(move.pokemon.name)
				self.knownOpponentTeam[move.pokemon.name] = newPokemon
				self.set_opponent_current_out(move)
			else:
				self.set_opponent_current_out(move)
		else:
			pokemon = self.knownOpponentTeam[move.pokemon.name]
			if move.moveName not in pokemon.moves:
				pokemon.moves.append(move.moveName)

	def process_turn(self, your_move, opponent_move):
		self.update_opponent_team(opponent_move)
		self.set_current_out(your_move)

	""" Just sends out the first Pokemon as generated by build_team() """
	def make_first_move(self):
		print("Switched to " + str(self.current_out))
		return player_move(True, self.current_out)

	""" As of right now, this just generates a random move. Note that this
		does not change the state of the player. Rather, when a move is successfully executed,
		then proc"""
	def move(self):
		move_type = random.randint(0,1)
		if move_type is 0:
			switch = self.current_out.name
			while (switch == self.current_out.name):
				switch = random.choice(list(self.team.keys()))
			move = player_move(True, self.team[switch])
			print("Switched to " + switch)
		else:
			i = random.randint(0,3)
			move = player_move(False, self.current_out, self.current_out.moves[i])
			print(str(self.current_out) + " used " + self.current_out.moves[i])

		return move

	""" The format of each individual pokemon is this:

	Jynx
	Blizzard
	Psychic
	Lovely Kiss
	Rest
	newline
	...

	This also sets the first Pokemon to the player's current on the field."""
	def build_team(self, filepath="sample-team.txt"):
		with open(filepath, "r") as infile:
			lines = infile.readlines()

		for i in range(len(lines)):
			if i % 6 == 0:
				name = lines[i].strip("\n").replace(" ","-")
				newPokemon = p.Pokemon(name)
				self.team[name] = newPokemon
			elif not (i % 6 == 5):
				self.team[name].addMove(lines[i].replace(" ","").lower().strip("\n"))
			elif i == 5:
				self.set_current_out(player_move(True, newPokemon))

	""" Takes in a pokemon's name and removes this key/value pair in the team"""
	def faintTeamMember(self, pokemonName):
		del self.team[pokemonName]

	def __str__(self):
		return "i exist!!"

""" This class is how a player defines what move they will make. It is routed to
an instance of Battle. The only information it needs contain is which Pokemon is performing
the action (of moving or entering the field), and what move, if any is being used.

Note that there is no information about damage, etc. here. This is handled by the Battle class."""
class player_move():
	def __init__(self, isSwitch, pokemon, moveName=None):
		self.isSwitch = isSwitch
		self.pokemon = pokemon
		self.moveName = moveName if moveName is not None else ""

	"""To do: make this spit out moves in the right order for a battle"""
	def comparator(move1, move2):
		if not (move1.isSwitch or move2.isSwitch):
			return move1.pokemon.stats['speed'] - move2.pokemon.stats['speed']
		else:
			return 1


if __name__ == "__main__":
	thomas = Player()
	for i in range(10):
		move = thomas.move()
		thomas.process_turn(move, player_move(True, p.Pokemon("Tauros")))

